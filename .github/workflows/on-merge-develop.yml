name: Deploy QA

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  FUNCTION_APP_DIR: "src/API/WesternStatesWater.WestDaat.Client.Functions"
  REACT_APP_WEBAPI_URL: "https://westdaat-qa.azurewebsites.net/api/"
  REACT_APP_AUTH_REDIRECT_URL: "https://westdaatqa.westernstateswater.org/authredirect.html" # the URL used by Azure B2C to redirect to your app after login
  REACT_APP_AUTH_CLIENT_ID: "ab3cf308-8a7e-404e-977c-d0227f4a48c4"
  REACT_APP_AUTH_AUTHORITY: "https://westdaatqa.b2clogin.com/westdaatqa.onmicrosoft.com/b2c_1_signupsignin"
  REACT_APP_AUTH_KNOWN_AUTHORITY: "https://westdaatqa.b2clogin.com/westdaatqa.onmicrosoft.com"
  REACT_APP_GA_ID: "G-KFL0TGM4B8" # set the Google Analytics measurement ID
  AZURE_RESOURCE_GROUP: WestDAAT_QA # set the resource group name
  AZURE_FUNCTIONAPP_NAME: westdaat-qa # set this to the name of your Azure Web App
  AZURE_STORAGE_ACCOUNT_NAME: westdaatqa # set the storage account of static site
  AZURE_CDN_ENDPOINT_NAME: westdaatqa # set the storage account of static site
  AZURE_CDN_PROFILE_NAME: westdaatqa # set the cdn profile name
  AZURE_APIM_NAME: "westdaatqa" # set this to the name of your Azure API Management service
  AZURE_API_NAME: "westdaat-fn-api-qa" # set this to the name of your API in Azure API Management
  AZURE_API_URL: "https://westdaatqa.azure-api.net/api" # set this to the URL of your API in Azure API Management
  DOTNET_VERSION: "8.0.x" # set this to the .NET Core version to use
  NODE_VERSION: "16.x" # set this to the node version to use

jobs:
  deploy-backend:
    steps:
      - name: "Deploy Backend"
        uses: ./.github/workflows/deploy-backend.yml
        with:
          azure-resource-group: ${{ env.AZURE_RESOURCE_GROUP }}
          azure-functionapp-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          azure-apim-name: ${{ env.AZURE_APIM_NAME }}
          azure-api-name: ${{ env.AZURE_API_NAME }}
          azure-api-url: ${{ env.AZURE_API_URL }}
          azure-function-publish-profile: ${{ secrets.AZURE_FUNCTION_PUBLISH_PROFILE_QA }}
        secrets:
          azure-cli-credentials: ${{ env.AZURE_AZ_CLI_CREDENTIALS_QA }}
          azure-function-publish-profile: ${{ env.AZURE_FUNCTION_PUBLISH_PROFILE_QA }}

  deploy-funtion-app:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FUNCTION_APP_DIR }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Build Function App"
        run: dotnet build --configuration Release --output ./fnapp
      - name: "Deploy Function App"
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: "${{ env.FUNCTION_APP_DIR }}/fnapp"
          publish-profile: ${{ secrets.AZURE_FUNCTION_PUBLISH_PROFILE_QA }}

  deploy-static-site:
    runs-on: ubuntu-latest
    needs: deploy-funtion-app
    defaults:
      run:
        working-directory: src/DashboardUI

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache-dependency-path: ./src/DashboardUI/package-lock.json
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - run: rm build/robots.allowall.txt

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_AZ_CLI_CREDENTIALS_QA }}

      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --destination '$web' --source 'src/DashboardUI/build' --account-name ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} --auth-mode key --overwrite

      - name: Purge CDN endpoint
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az cdn endpoint purge --content-paths  "/*" --profile-name ${{ env.AZURE_CDN_PROFILE_NAME }} --name ${{ env.AZURE_CDN_ENDPOINT_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

      - name: Azure cli logout
        run: |
          az logout
        if: always()

  deploy-api:
    runs-on: ubuntu-latest
    needs: deploy-funtion-app
    defaults:
      run:
        working-directory: src/DashboardUI

    steps:
      # Required to run func commands in the generation shell script
      - name: Install Azure Functions Core Tools
        run: sudo apt-get install -y azure-functions-core-tools-4

      # Need permissions to run the script
      - name: Update OpenAPI Script Permissions
        run: chmod 777 ./get-openapi-document.sh
        working-directory: .github/workflows

      # Generate OpenAPI document via shell script
      - name: Generate OpenAPI document
        id: oai
        run: ./get-openapi-document.sh -d 30 -p "src/API/WesternStatesWater.WestDaat.Client.Functions" -o ".github/workflows"
        working-directory: .github/workflows

      - name: Check generated OpenAPI document
        run: cat swagger.json
        working-directory: .github/workflows

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_AZ_CLI_CREDENTIALS_QA }}

      - name: Deploy API to APIM
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az apim api import --path api --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --service-name ${{ env.AZURE_APIM_NAME }} --api-id ${{ env.AZURE_API_NAME }} --path 'api/app' \
              --specification-format OpenApiJson --specification-path .github/workflows/swagger.json \
              --service-url ${{ env.AZURE_API_URL }} --subscription-required false

      - name: Azure cli logout
        run: |
          az logout
        if: always()
